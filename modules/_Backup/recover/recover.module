<?php

/**
 * @file Recover works in real-time to monitor and record important events on your site and allow recovery.
 */

/**
 * Implement hook_menu().
 */
function recover_menu() {
  $items['recover'] = array(
    'title' => 'Recover items',
    'description' => 'Choose items to recover',
    'page callback' => 'recover_items_page',
    'access arguments' => array('administer nodes'),
  );
  $items['recover/%'] = array(
    'title' => 'Recover item',
    'type' => MENU_CALLBACK,
    'description' => 'Recover an item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recover_item_form', 1),
    'access arguments' => array('administer nodes'),
  );
  return $items;
}

/**
 * Implement hook_admin_paths().
 */
function recover_admin_paths() {
  $paths = array(
    'recover/*' => TRUE,
    'recover' => TRUE,
  );

  return $paths;
}

/**
 * Provide a confirmation page to recover an item.
 */
function recover_item_form($form, &$form_state, $rid) {
  $form['#rid'] = $rid;
  // Look up title and date here.
  //$result = db_query("SELECT * FROM {recover} WHERE rid = ?", array((int) $rid))->fetchObject();
  //print_r($result);
  return confirm_form(
    $form,
    t('Are you sure you want to recover this item %item?', array('%item' => $rid)),
    'recover',
    t('This action can be undone.'),
    t('Recover'),
    t('Cancel'));
}

/**
 * Redirect our emotional baggage to another function.
 */
function recover_item_form_submit($form, &$form_state) {
  $rid = $form['#rid'];
  recover_items($rid);
  drupal_goto('recover');
}

/**
 * Recover items.
 */
function recover_items($items, $log_only = 0) {
  if (!is_array(($items))) {
    $items = array($items);
  }

  foreach ($items as $item) {
    $result = db_query("SELECT * FROM {recover} WHERE rid = ?", array((int) $item))->fetchObject();
    if ($result) {
      $type = $result->type;
      // Let's just pretend this is another function for handling nodes and be lazy

      if (empty($result->data)) {
        // Some impossible action occured that removed this node, and we will duplicate it.
        node_delete($result->riid);
        return TRUE; // All's well that ends well.
      }

      $node = unserialize($result->data);
      $original = node_load($result->riid);

      if ($original !== FALSE) {
        $node->original = $original;
        $node->is_new   = 0;
      }
      else {
        $node->original = $node;
        $node->is_new   = 1;
      }

      // A restored deleted node counts as an 'insert' to NodeAPI.
      node_save($node);
    }
    else {
      drupal_set_message(t("Could not recover item #%rid, as the item to recover does not exist.", array('%rid' => $item)));
    }
  }
}

/**
 * Build the table render array.
 *
 * @return array A render array set for theming by theme_table().
 */
function recover_items_page() {
  // We are going to output the results in a table with a nice header.
  $header = array(
    array('data' => t('Type'), 'field' => 'r.type'),
    array('data' => t('Title'), 'field' => 'r.name'),
    array('data' => t('Action'), 'field' => 'r.action'),
    array('data' => t('Date'), 'field' => 'r.date', 'sort' => 'desc'),
    array('data' => t('Operations')),
  );

  $query = db_select('recover', 'r')->extend('TableSort');
  $query->fields('r', array('type', 'name', 'action', 'date', 'rid', 'riid'));

  $result = $query
    ->orderByHeader($header)
    ->execute();

  $rows = array();
  foreach ($result as $row) {
    $row = (array) $row;
    $rid = $row['rid'];
    $riid = $row['riid'];
    unset($row['rid']);
    unset($row['riid']);

    if ($row['action'] == 'insert') {
      $row['op'] = l(t('recover'), "recover/$rid") . ' ' . l(t('delete'), "node/$riid/delete", array("query" => array('destination' => $_GET['q'])));
    }
    else {
      $row['op'] = l(t('recover'), "recover/$rid");
    }

    $rows[] = array('data' => $row);
  }

  // build the table for the nice output.
  $build['tablesort_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  return $build;
}

/**
 * Implement hook_node_delete().
 * @param $node Node object being deleted.
 */
function recover_node_delete($node) {
  recover_snapshot(array(
    'content' => $node, // Node is now gone.
    'type'    => 'node',
    'name'    => $node->type . ': ' . $node->title,
    'riid'    => $node->nid,
    'action'  => 'delete',
   ));
}

/**
 * Implement hook_node_delete().
 * @param $node Node object being updated.
 */
function recover_node_update($node) {
  recover_snapshot(array(
    'content' => $node,
    'type'    => 'node',
    'name'    => $node->type . ': ' . $node->original->title,
    'riid'    => $node->nid,
    'action'  => 'update',
  ));
}

/**
 * Implement hook_node_insert().
 * @param $node Node object being added.
 */
function recover_node_insert($node) {
  recover_snapshot(array(
    'content' => $node,
    'type'    => 'node',
    'name'    => $node->type . ': ' . $node->title,
    'riid'    => $node->nid,
    'action'  => 'insert',
  ));
}

/**
 * Save a snapshot of an item before an action occured.
 * @param $var (array) An array of
 * @return bool
 */
function recover_snapshot($var) {
  if(empty($var['type']) || empty($var['action'])) return FALSE;
  global $user;
  $hook = 'recover_' . $var['type'] . '_' . $var['action'];
  module_invoke_all($hook, $var);

  if (!empty($var['content'])) {
    $content = serialize($var['content']);
  }
  else {
    $content = '';
  }

  $fields = array(
    'action'  => $var['action'],
    'type'    => $var['type'],
    'data'    => $content,
    'name'    => $var['name'],
    'riid'    => (!empty($var['riid'])) ? $var['riid'] : 0,
    'uid'     => (!empty($var['uid'])) ? $var['uid'] : $user->uid,
    'date'    => REQUEST_TIME,
  );

  db_insert('recover')->fields($fields)->execute();
}