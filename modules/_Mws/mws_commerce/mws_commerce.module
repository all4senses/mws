<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Implements hook_menu().
 */
function mws_commerce_menu() {
 
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'mws_commerce_testPage',
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  ); 

  $items['mws/catalog'] = array(
    'title' => 'Mws catalog page',
    'page callback' => 'mws_commerce_catalogPage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['mws/cart'] = array(
    'title' => 'Shopping cart',
    'page callback' => 'mws_commerce_cart_view',
    'access arguments' => array('access content'),
  );

 /* 
  $items['cart/my'] = array(
    'title' => 'Shopping cart (# items)',
    'title callback' => 'commerce_cart_menu_item_title',
    'title arguments' => array(TRUE),
    'page callback' => 'commerce_cart_menu_item_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
*/
  $items['mws/checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'mws_commerce_checkout_router',
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
  
}


/**
 * Alter commerce_line_item_summary_link_info variable, defined in function commerce_line_item_summary_links()
 * 
 * Replace default url of cart and checkout to redefined ones for a Mws cart block.
 */
function mws_commerce_commerce_line_item_summary_link_info_alter(&$links) {
  $args = arg();
  if (@$args[0] == 'mws' || (@$args[2] == 'views' && (@$args[4] == 'mws_shopping_cart' || @$args[5] == 'mws_shopping_cart'))) {
    if (isset($links['view_cart'])) {
      $links['view_cart']['href'] = 'mws/cart';
    }
    if (isset($links['checkout'])) {
      $links['checkout']['href'] = 'mws/checkout';
    }
  }
}


/**
 * Implements hook_rules_action_info_alter.
 * 
 * Replaces cart link url to mws/cart in the resulting massage after adding a product to the cart.
 */
function mws_commerce_rules_action_info_alter(&$actions) {
  
  // Original code for the action from function commerce_cart_rules_action_info() 
  /*
  $actions['commerce_cart_add_to_cart_message'] = array(
    'label' => t('Display a translatable Add to Cart message'),
    'parameter' => array(
      'commerce_product' => array(
        'type' => 'commerce_product',
        'label' => t('Product added to the cart'),
      ),
    ),
    'group' => t('Commerce Cart'),
    'callbacks' => array(
      'execute' => 'commerce_cart_rules_add_to_cart_message',
    ),
  );
  */
  
  // Override with own callback.
  $actions['commerce_cart_add_to_cart_message']['callbacks']['execute'] = 'mws_commerce_rules_add_to_cart_message';
}


/**
 * Override callback for Rules action: displays a the default translatable Add to Cart message.
 */
function mws_commerce_rules_add_to_cart_message($product) {
  drupal_set_message(t('%title added to <a href="!cart-url">your cart</a>.', array('%title' => $product->title, '!cart-url' => url('mws/cart'))));
}


/**
 * Mws Catalog page.
 */
function mws_commerce_catalogPage() {
  
  global $user;
  $out = NULL;
  
  // Cart block/link.
  // The code was taken from:
  // class commerce_line_item_handler_area_line_item_summary extends views_handler_area {
  // and its function render($empty = FALSE)
  // 
  // Also from here:
  // function commerce_cart_block_view($delta) {
  //
  // And a bit from here:   commerce_line_item_theme()
  $cart_block = 'Your cart is empty';
  if ($order = commerce_cart_order_load($user->uid)) {
      $wrapper = entity_metadata_wrapper('commerce_order', $order);

      // If there are one or more products in the cart...
      if (($quantity = commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types())) > 0) {
        
        $total = commerce_line_items_total($wrapper->commerce_line_items);
        $currency = commerce_currency_load($total['currency_code']);
        $cart_block = '<span>Qty: </span><span>' . $quantity . ' ' . format_plural($quantity, 'item', 'items', array(), array('context' => 'product count on a Commerce order')) . '</span><span>Total: </span><span>' . commerce_currency_format($total['amount'], $total['currency_code']) . '</span><span>' . l('View Cart', 'mws/cart') . '</span><span>' . l('Checkout', 'mws/checkout') . '</span>';
        // Full block with the list of products.
        //$cart_block = commerce_embed_view('mws_shopping_cart', 'block', array($order->order_id));

      }
  }
  
  $out .= '<div>' . $cart_block . '</div>';
  
  // Doesn't work.
  //$block_data = array('module' => 'views', 'delta' => 'mws_cart_block');
  //$out .= mws_commerce_getBlockThemed($block_data);
  

  
  // Render a list of products.
  $tids = array(3 => 3, 4 => 4);
  $display = 'block_products';
 
  $view = views_get_view('catalog_node_siblings');
  $options = array(
    'id' => 'tid',
    'value' => $tids, 
    'type' => 'select',
    'vid' =>  'catalog',
    'hierarchy' => 1,
    'reduce_duplicates' => 1,
    'group' => 0,
  );
  $view->add_item($display, 'filter', 'taxonomy_index', 'tid', $options);

  $out .= $view->preview($display);
  
  return $out;
}


/**
 * Implements hook_form_alter().
 * 
 * Adds some buttons to a Mws Shopping cart
 * 
 * The code was taken from function commerce_cart_form_alter(&$form, &$form_state, $form_id) {
 * 
 * Original id: views_form_commerce_cart_form_default
 * 
 * New id: views_form_mws_shopping_cart_page_main
 */
//function commerce_cart_form_alter(&$form, &$form_state, $form_id) {
function mws_commerce_form_alter(&$form, &$form_state, $form_id) {
  //if (strpos($form_id, 'views_form_commerce_cart_form_') === 0) {
  if (strpos($form_id, 'views_form_mws_shopping_cart_form') === 0) {
    // Only alter buttons if the cart form View shows line items.
    $view = reset($form_state['build_info']['args']);

    if (!empty($view->result)) {
      // Change the Save button to say Update cart.
      $form['actions']['submit']['#value'] = t('Update cart');
      $form['actions']['submit']['#submit'] = array_merge($form['#submit'], array('commerce_cart_line_item_views_form_submit'));

      // Change any Delete buttons to say Remove.
      if (!empty($form['edit_delete'])) {
        foreach(element_children($form['edit_delete']) as $key) {
          // Load and wrap the line item to have the title in the submit phase.
          if (!empty($form['edit_delete'][$key]['#line_item_id'])) {
            $line_item_id = $form['edit_delete'][$key]['#line_item_id'];
            $form_state['line_items'][$line_item_id] = commerce_line_item_load($line_item_id);

            $form['edit_delete'][$key]['#value'] = t('Remove');
            $form['edit_delete'][$key]['#submit'] = array_merge($form['#submit'], array('commerce_cart_line_item_delete_form_submit'));
          }
        }
      }
      
      
      
      
      // A code from function commerce_checkout_form_alter(&$form, &$form_state, $form_id) {
      $form['actions']['checkout'] = array(
        '#type' => 'submit',
        '#value' => t('Checkout'),
        '#weight' => 5,
        '#access' => user_access('access checkout'),
        //'#submit' => array_merge($form['#submit'], array('commerce_checkout_line_item_views_form_submit')),
        '#submit' => array_merge($form['#submit'], array('mws_commerce_line_item_views_form_submit')),
      );
      
    }
    else {
      // Otherwise go ahead and remove any buttons from the View.
      unset($form['actions']);
    }
  }
  
  
  // TODO: To be changed for Mws...
  
//  elseif (strpos($form_id, 'commerce_checkout_form_') === 0 && !empty($form['buttons']['cancel'])) {
//    // Override the submit handler for changing the order status on checkout cancel.
//    foreach ($form['buttons']['cancel']['#submit'] as $key => &$value) {
//      if ($value == 'commerce_checkout_form_cancel_submit') {
//        $value = 'commerce_cart_checkout_form_cancel_submit';
//      }
//    }
//  }
  //elseif (strpos($form_id, 'views_form_commerce_cart_block') === 0) {
  elseif (strpos($form_id, 'views_form_mws_shopping_cart_block') === 0) {
    // No point in having a "Save" button on the shopping cart block.
    unset($form['actions']);
  }
}


/**
 * Submit handler used to redirect to the checkout page.
 */
//function commerce_checkout_line_item_views_form_submit($form, &$form_state) {
function mws_commerce_line_item_views_form_submit($form, &$form_state) {
  $order = commerce_order_load($form_state['order']->order_id);

  // Set the order status to the first checkout page's status.
  $order_state = commerce_order_state_load('checkout');
  $form_state['order'] = commerce_order_status_update($order, $order_state['default_status'], TRUE);

  // Skip saving in the status update and manually save here to force a save
  // even when the status doesn't actually change.
  if (variable_get('commerce_order_auto_revision', TRUE)) {
    $form_state['order']->revision = TRUE;
    $form_state['order']->log = t('Customer proceeded to checkout using a submit button.');
  }

  commerce_order_save($form_state['order']);

  // Redirect to the checkout page if specified.
  if ($form_state['triggering_element']['#value'] == $form['actions']['checkout']['#value']) {
    //$form_state['redirect'] = 'checkout/' . $order->order_id;
    $form_state['redirect'] = 'mws/checkout/' . $order->order_id;
  }
}


/**
 * Test page.
 */
function mws_commerce_testPage() {
  $out = '<div>Test starts</div>';
  
  $out .= '<div>Test ends</div>';
  
  return $out;
}


/**
 * Override or insert variables into the page template.
 */
function mws_commerce_process_page(&$variables) {
  
  if (arg(0) == 'mws') {
    module_invoke('admin_menu', 'suppress');
    $variables['theme_hook_suggestions'][] = 'page__url__mws';
  }
}


/**
 * Implements hook_theme_registry_alter()
**/
function mws_commerce_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'mws_commerce');
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('page', 'node');
  foreach ($hooks as $h) {
    _mws_commerce_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}


/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _mws_commerce_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}


/**
 * Implements hook_token_info().
 */
function mws_commerce_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['node-term-siblings'] = array(
    'name' => t('Node term siblings'),
    'description' => t('First Node siblings'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function mws_commerce_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'node-term-siblings':
          
          $term_children = taxonomy_get_children($node->field_category['und'][0]['taxonomy_term']->tid, $node->field_category['und'][0]['taxonomy_term']->vid);

          $replacements[$original] = '';
          foreach($term_children as $term_child) {
            $replacements[$original] .= ($replacements[$original] ? '+' . $term_child->tid : $term_child->tid);
          }
          
          break;
      }
    }
  }
  
  return $replacements;
}


/**
 * Wrap a block content in proper block's divs.
 */
function mws_commerce_wrapInBlockThemed($block_data, $block)
{
  if(!isset($block['content']) || !$block['content']) {
      return null;
  }
  if (is_array($block['content'])) {
    $block['content'] = render($block);
  }
  
    return 
      '<section id="block-' . $block_data['module'] . '-' . $block_data['delta'] . '" class="block gv block-' . $block_data['module'] . '">' 
         . ( ($block['subject'] && (!isset($block_data['subject_visible']) || $block_data['subject_visible']) )
            ? 
            '<div class="block-icon pngfix"></div><h2 class="block-title">' . $block['subject'] . '</h2>'
            :
            '') 
         . '<div class="content">' . $block['content'] . '</div>
      </section>';
  
}


/**
 * Returns a content of a block wrapped in proper divs.
 */
function mws_commerce_getBlockThemed($block_data)
{
  $block = module_invoke($block_data['module'], 'block_view', $block_data['delta']);
  //dpm($block);
  if ($block) {
    return mws_commerce_wrapInBlockThemed($block_data, $block);
  }
  return NULL;
}


/**
 * A code from commerce_cart.pages.inc
 * 
 * Redirects invalid checkout attempts or displays the checkout form if valid.
 */
function mws_commerce_checkout_router() {
  global $user;

  // Load the shopping cart order.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
  }

  // If no shopping cart order could be found, redirect away from checkout.
  // TODO: Redirect to the cart page instead which would then appear as an
  // empty shopping cart page.
  if (empty($order) || commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) == 0) {
    drupal_set_message(t('Add some items to your cart and then try checking out.'));
    //drupal_goto(variable_get('commerce_checkout_empty_redirect', ''));
    // TODO: Mws - this var not yet defined by a4s...
    drupal_goto(variable_get('mws_commerce_checkout_empty_redirect', ''));
  }

  //drupal_goto('checkout/' . $order->order_id);
  drupal_goto('mws/checkout/' . $order->order_id);
}

/**
 * Displays the shopping cart form and associated information.
 */
//function commerce_cart_view() {
function mws_commerce_cart_view() {
  global $user;

  // Default to displaying an empty message.
  $content = theme('commerce_cart_empty_page');

  // First check to make sure we have a valid order.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Only show the cart form if we found product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {

      // Add the form for editing the cart contents.
      //$content = commerce_embed_view('commerce_cart_form', 'default', array($order->order_id), 'cart');
      $content = commerce_embed_view('mws_shopping_cart', 'form', array($order->order_id), 'mws/cart');
    }
  }

  return $content;
}
