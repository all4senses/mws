<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Implements hook_menu().
 */
function mws_commerce_menu() {
 
  $items['mws.js'] = array(
    'title' => 'Test page',
    'page callback' => 'mws_commerce_loadShopToRemoteSite_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['getshopurl'] = array(
    'title' => 'Make a request',
    'page callback' => 'mws_commerce_getShopUrl_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'mws_commerce_testPage',
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  ); 

  $items['mws/catalog'] = array(
    'title' => 'Mws catalog page',
    'page callback' => 'mws_commerce_catalogPage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['mws/cart'] = array(
    'title' => 'Shopping cart',
    'page callback' => 'mws_commerce_cart_view',
    'access arguments' => array('access content'),
  );

 /* 
  $items['cart/my'] = array(
    'title' => 'Shopping cart (# items)',
    'title callback' => 'commerce_cart_menu_item_title',
    'title arguments' => array(TRUE),
    'page callback' => 'commerce_cart_menu_item_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
*/
  $items['mws/checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'mws_commerce_cart_checkout_router',
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );
  
  $items['mws/checkout/%commerce_order'] = array(
    'title' => 'Checkout',
    'page callback' => 'mws_commerce_checkout_router',
    'page arguments' => array(2),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );
  $items['mws/checkout/%commerce_order/%commerce_checkout_page'] = array(
    'title' => 'Checkout',
    'page callback' => 'mws_commerce_checkout_router',
    'page arguments' => array(2, 3),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );   
  
  return $items;
  
}


/**
 * Return a shop url to load into a target site's iframe.
 */
function mws_commerce_getShopUrl_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_GET as $key => $value) {
    $get[$key] = check_plain(strip_tags($value));
  }
  
  // Get a remote client site's keywords to find out what shop to load.
  $context['url'] = $get['target_url'];
  if ($context['page'] = mws_commerce_file_get_content($context['url'], &$error_data)) {
    $context = contentanalysis_parse_context_page($context, $analysis);
    $site_keywords = kwanalysis_extract_autokeyword($context, $analysis);
    //dpm($site_keywords);
    $shopUrl = mws_commerce_chooseRelevantShop($site_keywords);
  }
  else {
    // Error while parsing a file, so return a default or a random shop.
    //dpm($error_data);
    $shopUrl = mws_commerce_chooseRelevantShop();
  }
    
  //$arr['name'] = "response";
  echo @$_GET['callback']."(".json_encode(array('status' => $status, 'target_url' => $get['target_url'], 'shopUrl' => $shopUrl)).");"; 
  //drupal_json_output(array('status' => $status, 'data' => $output, 'shopUrl' => $shopUrl));
}


/**
 * Matches a target site keywords to available shops in the MWS Network and returns the most suitable one.
 * 
 * $site_keywords = NULL: Return a default or a random shop.
 */
function mws_commerce_chooseRelevantShop($site_keywords = NULL) {
  
  // A Stub with the example shop.
  $shopUrl = 'http://mws.all4senses.com/mws/catalog';
  
  return $shopUrl;
}



/**
 * Return a js script that load a shop "block" into iframe of a target (client) remote site.
 */
function mws_commerce_loadShopToRemoteSite_js() {
  
  drupal_add_http_header('Content-Type', 'text/javascript');
  
  print <<<END

 function getShopUrl(){
 
    //console.log(document.referrer);
    //console.log(document.URL);
    //console.log(document);
    
    (jQuery).ajax({
            
        url: 'http://mws.all4senses.com/getshopurl', 
        data: {
                op: 'getShopUrl',
                target_url: document.URL,
              }, 
            type: 'GET', 
            dataType: 'jsonp',
            success: function(data) 
                    { 
                        if(!data.error) {
                          if (data.shopUrl) {
                            createIframe(data.shopUrl);
                            //console.log(data.target_url);
                          }
                        }
                        else {
                          return false;
                        }
                    } 
    }); // end of (jQuery).ajax
            
};


//doesnt block the load event
function createIframe(shopUrl){
  
  var i = document.createElement("iframe");
  i.src = shopUrl; //"http://mws.all4senses.com/mws/catalog"
  i.scrolling = "auto";
  i.frameborder = "0";
  i.width = "700px";
  i.height = "200px";
  document.getElementById("mws").appendChild(i);
};

// Check for browser support of event handling capability
if (window.addEventListener)
  window.addEventListener("load", getShopUrl, false);
else if (window.attachEvent)
  window.attachEvent("onload", getShopUrl);
else 
  window.onload = createIframe;

END;

}


/**
 * Alter commerce_line_item_summary_link_info variable, defined in function commerce_line_item_summary_links()
 * 
 * Replace default url of cart and checkout to redefined ones for a Mws cart block.
 */
function mws_commerce_commerce_line_item_summary_link_info_alter(&$links) {
  $args = arg();
  if (@$args[0] == 'mws' || (@$args[2] == 'views' && (@$args[4] == 'mws_shopping_cart' || @$args[5] == 'mws_shopping_cart'))) {
    if (isset($links['view_cart'])) {
      $links['view_cart']['href'] = 'mws/cart';
    }
    if (isset($links['checkout'])) {
      $links['checkout']['href'] = 'mws/checkout';
    }
  }
}


/**
 * Implements hook_rules_action_info_alter.
 * 
 * Replaces cart link url to mws/cart in the resulting massage after adding a product to the cart.
 */
function mws_commerce_rules_action_info_alter(&$actions) {
  
  // Original code for the action from function commerce_cart_rules_action_info() 
  /*
  $actions['commerce_cart_add_to_cart_message'] = array(
    'label' => t('Display a translatable Add to Cart message'),
    'parameter' => array(
      'commerce_product' => array(
        'type' => 'commerce_product',
        'label' => t('Product added to the cart'),
      ),
    ),
    'group' => t('Commerce Cart'),
    'callbacks' => array(
      'execute' => 'commerce_cart_rules_add_to_cart_message',
    ),
  );
  */
  
  // Override with own callback.
  $args = arg();
  if (@$args[0] == 'mws') {
    $actions['commerce_cart_add_to_cart_message']['callbacks']['execute'] = 'mws_commerce_rules_add_to_cart_message';
  }
}


/**
 * Override callback for Rules action: displays a the default translatable Add to Cart message.
 */
function mws_commerce_rules_add_to_cart_message($product) {
  drupal_set_message(t('%title added to <a href="!cart-url">your cart</a>.', array('%title' => $product->title, '!cart-url' => url('mws/cart'))));
}


/**
 * Mws Catalog page.
 */
function mws_commerce_catalogPage() {
  
  $out = NULL;
    
  if (@$_GET['l']) {

    // Show a product page
    if (is_numeric($nid = str_replace('node/', '', $_GET['l'])) || ($nid = str_replace('node/', '', drupal_lookup_path('source', $_GET['l']))) ) {
      $node = node_load($nid);
      $out .= render(node_view($node, 'page'));
    }
    else {
      $out .= 'No such product found';
    }
    
  }
  else {
    // Show catalog, list



    // Render a list of products.
    $tids = array(3 => 3, 4 => 4);
    $display = 'block_products';

    $view = views_get_view('catalog_node_siblings');
    $options = array(
      'id' => 'tid',
      'value' => $tids, 
      'type' => 'select',
      'vid' =>  'catalog',
      'hierarchy' => 1,
      'reduce_duplicates' => 1,
      'group' => 0,
    );
    $view->add_item($display, 'filter', 'taxonomy_index', 'tid', $options);

    $out .= $view->preview($display);
    
  }
  
  return $out;
}


/**
 * Implements hook_form_alter().
 * 
 * Adds some buttons to a Mws Shopping cart
 * 
 * The code was taken from function commerce_cart_form_alter(&$form, &$form_state, $form_id) {
 * 
 * Original id: views_form_commerce_cart_form_default
 * 
 * New id: views_form_mws_shopping_cart_page_main
 */
//function commerce_cart_form_alter(&$form, &$form_state, $form_id) {
function mws_commerce_form_alter(&$form, &$form_state, $form_id) {
  //if (strpos($form_id, 'views_form_commerce_cart_form_') === 0) {
  if (strpos($form_id, 'views_form_mws_shopping_cart_form') === 0) {
    // Only alter buttons if the cart form View shows line items.
    $view = reset($form_state['build_info']['args']);
    
    if (!empty($view->result)) {
      // Change the Save button to say Update cart.
      $form['actions']['submit']['#value'] = t('Update cart');
      $form['actions']['submit']['#submit'] = array_merge($form['#submit'], array('commerce_cart_line_item_views_form_submit'));

      // Change any Delete buttons to say Remove.
      if (!empty($form['edit_delete'])) {
        foreach(element_children($form['edit_delete']) as $key) {
          // Load and wrap the line item to have the title in the submit phase.
          if (!empty($form['edit_delete'][$key]['#line_item_id'])) {
            $line_item_id = $form['edit_delete'][$key]['#line_item_id'];
            $form_state['line_items'][$line_item_id] = commerce_line_item_load($line_item_id);

            $form['edit_delete'][$key]['#value'] = t('Remove');
            $form['edit_delete'][$key]['#submit'] = array_merge($form['#submit'], array('commerce_cart_line_item_delete_form_submit'));
          }
        }
      }
      
      
      
      
      // A code from function commerce_checkout_form_alter(&$form, &$form_state, $form_id) {
      /*
      $form['actions']['checkout'] = array(
        '#type' => 'submit',
        '#value' => t('Checkout'),
        '#weight' => 5,
        '#access' => user_access('access checkout'),
        //'#submit' => array_merge($form['#submit'], array('commerce_checkout_line_item_views_form_submit')),
        '#submit' => array_merge($form['#submit'], array('mws_commerce_line_item_views_form_submit')),
      );
      */
      
      // Open a Checkout in a new window within the original shop site
      $form['actions']['checkout'] = array(
        '#markup' => l('Checkout', 'checkout', array('attributes' => array('class' => 'checkout_to_original', 'target' => '_blank'))),
        '#weight' => 5,
      );
      
    }
    else {
      // Otherwise go ahead and remove any buttons from the View.
      unset($form['actions']);
    }
  }
  
  
  // TODO: To be changed for Mws...
  
//  elseif (strpos($form_id, 'commerce_checkout_form_') === 0 && !empty($form['buttons']['cancel'])) {
//    // Override the submit handler for changing the order status on checkout cancel.
//    foreach ($form['buttons']['cancel']['#submit'] as $key => &$value) {
//      if ($value == 'commerce_checkout_form_cancel_submit') {
//        $value = 'commerce_cart_checkout_form_cancel_submit';
//      }
//    }
//  }
  //elseif (strpos($form_id, 'views_form_commerce_cart_block') === 0) {
  elseif (strpos($form_id, 'views_form_mws_shopping_cart_block') === 0) {
    // No point in having a "Save" button on the shopping cart block.
    unset($form['actions']);
  }
  elseif (arg(0) == 'mws' && strpos($form_id, 'commerce_checkout_form_') === 0) {
    
   if (isset($form['buttons'])) {
    // Should we have here replace 'commerce_checkout_form_submit' instead of redefine all field??
    //$form['buttons']['continue']['#submit'] = array('commerce_checkout_form_submit');
    $form['buttons']['continue']['#submit'][] = 'mws_commerce_checkout_form_submit';
    
    //if (isset($form_state['cancel_redirect'])) 
    {
      //$form_state['cancel_redirect'] = '<front>';
      $form_state['cancel_redirect'] = 'mws/catalog';
    }
    
    if (isset($form['buttons']['cancel'])) {
      $form['buttons']['cancel']['#submit'][] = 'mws_commerce_checkout_form_cancel_submit';
    }
    
    if (isset($form['buttons']['back'])) {
      //$form['buttons']['back']['#submit'] = array('commerce_checkout_form_back_submit');
      $form['buttons']['back']['#submit'][] = 'mws_commerce_checkout_form_back_submit';
    }
    
   } // End of if (isset($form['buttons'])) {
    
  } // End of if (strpos($form_id, 'commerce_checkout_form_') === 0) {
  
}



/**
 * Submit handler for the continue button of the checkout form.
 */
function mws_commerce_checkout_form_submit($form, &$form_state) {
  
  /*
  $checkout_page = $form_state['checkout_page'];

  // Load a fresh copy of the order stored in the form.
  $order = commerce_order_load($form_state['order']->order_id);

  // If we are going to redirect with checkout pane messages stored in the form
  // state, they will not be displayed on a subsequent form build like normal.
  // Move them out of the form state messages array and into the current
  // session's general message array instead.
  if (!empty($form_state['storage']['messages'])) {
    foreach ($form_state['storage']['messages'] as $pane_id => $pane_messages) {
      $_SESSION['messages'] = array_merge_recursive($_SESSION['messages'], $pane_messages);
    }
  }

  // If the form was submitted via the continue button...
  if (end($form_state['triggering_element']['#array_parents']) == 'continue') {
    // If there is another checkout page...
    if ($checkout_page['next_page']) {
      // Update the order status to reflect the next checkout page.
      $order = commerce_order_status_update($order, 'checkout_' . $checkout_page['next_page'], FALSE, NULL, t('Customer continued to the next checkout page via a submit button.'));

      // If it happens to be the complete page, process completion now.
      if ($checkout_page['next_page'] == 'complete') {
        commerce_checkout_complete($order);
      }

      // Redirect to the next checkout page.
      $form_state['redirect'] = 'checkout/' . $order->order_id . '/' . $checkout_page['next_page'];
    }
  }
  
  */
  
  if (isset($form_state['redirect'])) {
    $form_state['redirect'] = 'mws/' . $form_state['redirect'];
  }
}


/**
 * Special submit handler for the back button to avoid processing orders.
 */
function mws_commerce_checkout_form_back_submit($form, &$form_state) {
  /*
  // If there is a previous page...
  if ($previous_page = commerce_checkout_page_load($form_state['checkout_page']['prev_page'])) {
    $order = $form_state['order'];

    // Move the form back to that page.
    if ($previous_page['prev_page']) {
      $form_state['redirect'] = 'checkout/' . $order->order_id . '/' . $previous_page['page_id'];
    }
    else {
      $form_state['redirect'] = 'checkout/' . $order->order_id;
    }

    // Update the order status for the checkout step.
    $form_state['order'] = commerce_order_status_update($order, 'checkout_' . $previous_page['page_id'], FALSE, NULL, t('Customer returned to the previous checkout page via a submit button.'));
  }
  */
  
  if (isset($form_state['redirect'])) {
    $form_state['redirect'] = 'mws/' . $form_state['redirect'];
  }
  
}


/**
 * Special submit handler for the cancel button to avoid processing orders.
 */
function mws_commerce_checkout_form_cancel_submit($form, &$form_state) {
  /*
  $order = commerce_order_load($form_state['order']->order_id);

  // Set the order status back to the first checkout page's status.
  $order_state = commerce_order_state_load('checkout');
  $form_state['order'] = commerce_order_status_update($order, $order_state['default_status'], TRUE);

  // Skip saving in the status update and manually save here to force a save
  // even when the status doesn't actually change.
  if (variable_get('commerce_order_auto_revision', TRUE)) {
    $form_state['order']->revision = TRUE;
    $form_state['order']->log = t('Customer manually canceled the checkout process.');
  }

  commerce_order_save($form_state['order']);

  drupal_set_message(t('Checkout of your current order has been canceled and may be resumed when you are ready.'));
  */
  
  
    $form_state['redirect'] = $form_state['cancel_redirect']; 
  
}


/**
 * Submit handler used to redirect to the checkout page.
 */
//function commerce_checkout_line_item_views_form_submit($form, &$form_state) {
function mws_commerce_line_item_views_form_submit($form, &$form_state) {
  $order = commerce_order_load($form_state['order']->order_id);

  // Set the order status to the first checkout page's status.
  $order_state = commerce_order_state_load('checkout');
  $form_state['order'] = commerce_order_status_update($order, $order_state['default_status'], TRUE);

  // Skip saving in the status update and manually save here to force a save
  // even when the status doesn't actually change.
  if (variable_get('commerce_order_auto_revision', TRUE)) {
    $form_state['order']->revision = TRUE;
    $form_state['order']->log = t('Customer proceeded to checkout using a submit button.');
  }

  commerce_order_save($form_state['order']);

  // Redirect to the checkout page if specified.
  if ($form_state['triggering_element']['#value'] == $form['actions']['checkout']['#value']) {
    //$form_state['redirect'] = 'checkout/' . $order->order_id;
    
    // a4s
    ////$form_state['redirect'] = 'mws/checkout/' . $order->order_id;
    // Open in a new window doesn't work!
    $form_state['redirect'] = array(
      'checkout/' . $order->order_id,
      /*
      array(
        'attributes' => array(
          'target' => '_blank',
        ),
      ),
      */
    );
     
  }
  
}


/**
 * Test page.
 */
function mws_commerce_testPage() {
  $out = '<div>Test starts</div>';
  
  
  $context['url'] = 'http://park.all4senses.com/';
  
  if ($context['page'] = mws_commerce_file_get_content($context['url'], &$error_data)) {
    $context = contentanalysis_parse_context_page($context, $analysis);
    $site_keywords = kwanalysis_extract_autokeyword($context, $analysis);

    dpm($site_keywords);
  }
  else {
    dpm($error_data);
  }
  
  $out .= '<div>Test ends</div>';
  
  return $out;
}


/**
 * Get remote page content.
 */
function mws_commerce_file_get_content($url, &$error_data, $file_local_abs = NULL, $agentid = -1, $referer = "", $proxy = false){
    
  if ($agentid == -1) {
    $agentid = rand(0,520);
  }

  $curl = curl_init();

  // Setup headers - I used the same headers from Firefox version 2.0.0.6
  // below was split up because php.net said the line was too long. :/
  $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
  $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
  $header[] = "Cache-Control: max-age=0";
  $header[] = "Connection: keep-alive";
  $header[] = "Keep-Alive: 300";
  $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
  $header[] = "Accept-Language: en-us,en;q=0.5";
  $header[] = "Pragma: ";
  // browsers keep this blank.

  $referers = array("google.com", "yahoo.com", "msn.com", "ask.com", "live.com");
  $choice = array_rand($referers);

  if ($referer == "") {
    $referer = "http://www." . $referers[$choice] . "/";
  }

  //$browsers = array("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1) Gecko/20060918 Firefox/2.0", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)");
  //$choice2 = array_rand($browsers);
  $ua_file = DRUPAL_ROOT . '/' . drupal_get_path('module', 'mws_commerce') . '/inc/ua.txt';
  $lines = file($ua_file);
  $browser = trim($lines[$agentid]);

  if ($proxy) {
    curl_setopt($curl, CURLOPT_PROXY, 'rick-htpc.dyndns.tv:9050');
    curl_setopt($curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
  }

  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_USERAGENT, $browser);
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
  curl_setopt($curl, CURLOPT_REFERER, $referer);
  curl_setopt($curl, CURLOPT_AUTOREFERER, true);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_MAXREDIRS, 7);
  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

  $data = curl_exec($curl);

  if ($data === false) {
    $data = curl_error($curl);
    // close the connection
    curl_close($curl);
    $error_data = $data;
    return NULL;
  }

  // close the connection
  curl_close($curl);

  // write content to a file
  if ($file_local_abs) {
    file_put_contents($file_local_abs, $data);
    return NULL; //OK
  }
  else {
    return $data;
  }
  
} 


/**
 * Override or insert variables into the page template.
 */
function mws_commerce_process_page(&$variables) {
  
  if (@arg(0) == 'mws') {
    module_invoke('admin_menu', 'suppress');
    $variables['theme_hook_suggestions'][] = 'page__url__mws';
    
    $path_to_custom_js = drupal_get_path('module', 'mws_commerce') . '/js/';
    drupal_add_js($path_to_custom_js . 'checkout-prompt.js');
  
    // Mws header: menu, links, cart info, etc.
    $variables['mws_header'] = mws_commerce_mwsShowPageHeader();
  }
}


/**
* Default theme function for all fields rows.
*/
/*
function mws_commerce_preprocess_views_view_fields(&$vars) {
  
  dpm($vars);
  
}

function mws_commerce_process_views_view_fields(&$vars) {
  
  dpm($vars);
  
}
*/
function mws_commerce_preprocess_views_view_field(&$vars) {
  
  dpm($vars);
  
}

function mws_commerce_process_views_view_field(&$vars) {
  
  dpm($vars);
  
}


function mws_commerce_views_pre_render(&$view) {
  dpm($view);
  dpm($view->build_info);
}
/**
 * Mws header: menu, links, cart info, etc.
 */
function mws_commerce_mwsShowPageHeader() {
  
  $out = NULL;

  $mws_header = array();
  
  // Cart info and links.
  if (@arg(1) != 'cart') {

      global $user;


      // Cart block/link.
      // The code was taken from:
      // class commerce_line_item_handler_area_line_item_summary extends views_handler_area {
      // and its function render($empty = FALSE)
      // 
      // Also from here:
      // function commerce_cart_block_view($delta) {
      //
      // And a bit from here:   commerce_line_item_theme()
      $cart_block = 'Your cart is empty';
      if ($order = commerce_cart_order_load($user->uid)) {
          $wrapper = entity_metadata_wrapper('commerce_order', $order);

          // If there are one or more products in the cart...
          if (($quantity = commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types())) > 0) {

            $total = commerce_line_items_total($wrapper->commerce_line_items);
            $currency = commerce_currency_load($total['currency_code']);
            $cart_block = '<span>Qty: </span><span>' . $quantity . ' ' . format_plural($quantity, 'item', 'items', array(), array('context' => 'product count on a Commerce order')) . '</span><span>Total: </span><span>' . commerce_currency_format($total['amount'], $total['currency_code']) . '</span><span>' . l('View Cart', 'mws/cart') . '</span><span>' . l('Checkout', 'checkout', array('attributes' => array('class' => 'checkout_to_original', 'target' => '_blank'))) . '</span>';
            // Full block with the list of products.
            //$cart_block = commerce_embed_view('mws_shopping_cart', 'block', array($order->order_id));

          }
      }

      $mws_header['cart_info'] = array(
        '#markup' => '<div>' . $cart_block . '</div>',
      );
      
      //$out .= '<div>' . $cart_block . '</div>';

      // Doesn't work.
      //$block_data = array('module' => 'views', 'delta' => 'mws_cart_block');
      //$out .= mws_commerce_getBlockThemed($block_data);
  }

  if (@$_GET['l'] || @arg(1) == 'cart') {
      // Add a link to the catalog.
      $mws_header['catalog_link'] = array(
        '#markup' => '<span>' . l('Catalog', 'mws/catalog') . '</span>' . $out,
      );
      //$out .= '<span>' . l('Catalog', 'mws/catalog') . '</span>' . $out;
  }
  
  //return $out;
  return $mws_header;
}

/**
 * Override or insert variables into the node template.
 */
function mws_commerce_process_node(&$variables) {
  
  // Redirect product node page to a separate mws link... to show only a product node, without other site's template elements.
  if (@arg(0) == 'mws' && @arg(1) == 'catalog') {
    if ($variables['teaser'] && isset($variables['field_product'])) {
      $variables['node_url'] = '/mws/catalog?l=' . ltrim($variables['node_url'], '/');
      // Now to show the product at 'mws/products?l=' . $variables['node_url'] we need to get a link, transform it to a nid and get and show the node page
    }
  }
}


/**
 * Implements hook_theme_registry_alter()
**/
function mws_commerce_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'mws_commerce') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('page', 'node');
  foreach ($hooks as $h) {
    _mws_commerce_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}


/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _mws_commerce_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}


/**
 * Implements hook_token_info().
 */
function mws_commerce_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['node-term-siblings'] = array(
    'name' => t('Node term siblings'),
    'description' => t('First Node siblings'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function mws_commerce_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'node-term-siblings':
          
          $term_children = taxonomy_get_children($node->field_category['und'][0]['taxonomy_term']->tid, $node->field_category['und'][0]['taxonomy_term']->vid);

          $replacements[$original] = '';
          foreach($term_children as $term_child) {
            $replacements[$original] .= ($replacements[$original] ? '+' . $term_child->tid : $term_child->tid);
          }
          
          break;
      }
    }
  }
  
  return $replacements;
}


/**
 * Wrap a block content in proper block's divs.
 */
function mws_commerce_wrapInBlockThemed($block_data, $block)
{
  if(!isset($block['content']) || !$block['content']) {
      return null;
  }
  if (is_array($block['content'])) {
    $block['content'] = render($block);
  }
  
    return 
      '<section id="block-' . $block_data['module'] . '-' . $block_data['delta'] . '" class="block gv block-' . $block_data['module'] . '">' 
         . ( ($block['subject'] && (!isset($block_data['subject_visible']) || $block_data['subject_visible']) )
            ? 
            '<div class="block-icon pngfix"></div><h2 class="block-title">' . $block['subject'] . '</h2>'
            :
            '') 
         . '<div class="content">' . $block['content'] . '</div>
      </section>';
  
}


/**
 * Returns a content of a block wrapped in proper divs.
 */
function mws_commerce_getBlockThemed($block_data)
{
  $block = module_invoke($block_data['module'], 'block_view', $block_data['delta']);
  //dpm($block);
  if ($block) {
    return mws_commerce_wrapInBlockThemed($block_data, $block);
  }
  return NULL;
}


/**
 * A code from commerce_cart.pages.inc
 * 
 * Redirects invalid checkout attempts or displays the checkout form if valid.
 */
function mws_commerce_cart_checkout_router() {
  global $user;

  // Load the shopping cart order.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
  }

  // If no shopping cart order could be found, redirect away from checkout.
  // TODO: Redirect to the cart page instead which would then appear as an
  // empty shopping cart page.
  if (empty($order) || commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) == 0) {
    drupal_set_message(t('Add some items to your cart and then try checking out.'));
    //drupal_goto(variable_get('commerce_checkout_empty_redirect', ''));
    // TODO: Mws - this var not yet defined by a4s...
    drupal_goto(variable_get('mws_commerce_checkout_empty_redirect', ''));
  }

  //drupal_goto('checkout/' . $order->order_id);
  drupal_goto('mws/checkout/' . $order->order_id);
}

/**
 * Displays the shopping cart form and associated information.
 */
//function commerce_cart_view() {
function mws_commerce_cart_view() {
  global $user;

  // Default to displaying an empty message.
  $content = theme('commerce_cart_empty_page');

  // First check to make sure we have a valid order.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Only show the cart form if we found product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {

      // Add the form for editing the cart contents.
      //$content = commerce_embed_view('commerce_cart_form', 'default', array($order->order_id), 'cart');
      $content = commerce_embed_view('mws_shopping_cart', 'form', array($order->order_id), 'mws/cart');
    }
  }

  return $content;
}



/**
 * Redirects invalid checkout attempts or displays the checkout form if valid.
 */
function mws_commerce_checkout_router($order, $checkout_page = NULL) {
  $checkout_pages = commerce_checkout_pages();

  // If no checkout page is specified, default to the first one.
  if (empty($checkout_page)) {
    $checkout_page = reset($checkout_pages);
  }

  // If the user does not have access to checkout the order, return a 404. We
  // could return a 403, but then the user would know they've identified a
  // potentially valid checkout URL.
  if (!commerce_checkout_access($order)) {
    return MENU_NOT_FOUND;
  }

  // If the user is attempting to access an inaccessible page for their order,
  // redirect them to the proper page.
  if (!commerce_checkout_page_access($checkout_page, $order)) {
    $target_uri = commerce_checkout_order_uri($order);
    
    // a4s
    $target_uri = 'mws/' . $target_uri;
    
    // Only redirect if the target page is different from the page the user was
    // trying to access. Otherwise give a 403 error.
    if (!empty($target_uri) && $target_uri !== $_GET['q']) {
      return drupal_goto($target_uri);
    }
    else {
      return MENU_ACCESS_DENIED;
    }
  }

  // If there are no line items on the order, redirect away.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) == 0) {
    
    //drupal_goto('<front>');
    drupal_goto('mws/catalog');
    
  }

  // Prior to displaying the checkout form, allow other modules to route the
  // checkout form.
  module_invoke_all('commerce_checkout_router', $order, $checkout_page);

  // Update the page title if specified.
  if (!empty($checkout_page['title'])) {
    drupal_set_title($checkout_page['title']);
  }
  
  include_once drupal_get_path('module', 'commerce_checkout') . '/includes/commerce_checkout.pages.inc';

  return drupal_get_form('commerce_checkout_form_' . $checkout_page['page_id'], $order, $checkout_page);
}


/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function mws_commerce_node_view($node, $view_mode) {
 
  switch ($node->type) {
    
    default:
     
      break;
  }
}
