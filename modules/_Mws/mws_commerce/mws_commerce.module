<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Implements hook_menu().
 */
function mws_commerce_menu() {
 
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'mws_commerce_testPage',
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  ); 

  $items['mws/catalog'] = array(
    'title' => 'Mws catalog page',
    'page callback' => 'mws_commerce_catalogPage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
  
}


/**
 * Mws Catalog page.
 */
function mws_commerce_catalogPage() {
  $out = '<div>catalog starts</div>';
  
  $out .= '<div>catalog ends</div>';
  
  return $out;
}


/**
 * Test page.
 */
function mws_commerce_testPage() {
  $out = '<div>Test starts</div>';
  
  $out .= '<div>Test ends</div>';
  
  return $out;
}


/**
 * Override or insert variables into the page template.
 */
function mws_commerce_process_page(&$variables) {
  
  if (arg(0) == 'mws') {
    module_invoke('admin_menu', 'suppress');
    $variables['theme_hook_suggestions'][] = 'page__url__mws';
  }
}


/**
 * Implements hook_theme_registry_alter()
**/
function mws_commerce_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'mws_commerce');
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('page', 'node');
  foreach ($hooks as $h) {
    _mws_commerce_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}


/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _mws_commerce_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}


/**
 * Implements hook_token_info().
 */
function mws_commerce_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['node-term-siblings'] = array(
    'name' => t('Node term siblings'),
    'description' => t('First Node siblings'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function mws_commerce_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'node-term-siblings':
          
          $term_children = taxonomy_get_children($node->field_category['und'][0]['taxonomy_term']->tid, $node->field_category['und'][0]['taxonomy_term']->vid);

          $replacements[$original] = '';
          foreach($term_children as $term_child) {
            $replacements[$original] .= ($replacements[$original] ? '+' . $term_child->tid : $term_child->tid);
          }
          
          break;
      }
    }
  }
  
  return $replacements;
}
