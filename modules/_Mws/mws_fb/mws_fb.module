<?php

/**
 * Implements hook_menu().
 */
function mws_fb_menu() {
  /*
  $items['mws_fb/%mws_fb_action'] = array(
    'title' => 'Facebook connect',
    'page callback' => 'mws_fb_action_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'file' => 'includes/mws_fb.mws_fb.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
  */
}


function mws_fb_fboauth_actions_alter(&$actions) {
  // Replace the normal login callback with custom login callback.
  //$actions['connect']['permissions'][] = 'publish_stream';
}

/**
 * Implements hook_user_login().
 */
function mws_fb_user_login(&$edit, $account) {
  
  if (isset($_REQUEST['code']) && $shortLiveToken = fboauth_access_token($_REQUEST['code'], 'connect')) {
    if ($longLiveToken = mws_fb_getLongLiveToken($shortLiveToken)) {
      $fb_users = variable_get('fb_users', array());
      $fbuser = fboauth_graph_query('me', $longLiveToken);
      $fbuser->longLiveToken = $longLiveToken;
      $fb_users[$fbuser->id] = $fbuser;
      variable_set('fb_users', $fb_users);
      $_SESSION['fb_id'] = $fbuser->id;
      $_SESSION['fb_longLiveToken'] = $longLiveToken;
    }
  }
}


function mws_fb_getLongLiveToken($token, $app_id = NULL, $app_secret = NULL) {
  // Use the default App ID and App Secret if not specified.
  $app_id = isset($app_id) ? $app_id : variable_get('fboauth_id', '');
  $app_secret = isset($app_secret) ? $app_secret : variable_get('fboauth_secret', '');

  /*
  https://graph.facebook.com/oauth/access_token?             
    client_id=APP_ID&
    client_secret=APP_SECRET&
    grant_type=fb_exchange_token&
    fb_exchange_token=EXISTING_ACCESS_TOKEN 
  */  
    
  // Note that the "code" provided by Facebook is a hash based on the client_id,
  // client_secret, and redirect_url. All of these things must be IDENTICAL to
  // the same values that were passed to Facebook in the approval request. See
  // the fboauth_link_properties function.
  /*
  $query = array(
    'client_id' => $app_id,
    'client_secret' => $app_secret,
    'redirect_uri' => fboauth_action_url('fboauth/' . $action_name, array('absolute' => TRUE, 'query' => !empty($_GET['destination']) ? array('destination' => $_GET['destination']) : array())),
    'code' => $code,
  );
  */
  $query = array(
    'client_id' => $app_id,
    'client_secret' => $app_secret,
    'grant_type' => 'fb_exchange_token',
    'fb_exchange_token' => $token,
  );
  
  
  $token_url = url('https://graph.facebook.com/oauth/access_token', array('absolute' => TRUE, 'query' => $query));
  $authentication_result = drupal_http_request($token_url);

  if ($authentication_result->code != 200) {
    watchdog('fboauth', 'My LongLiveTokenRequest: Facebook OAuth could not acquire an access token from Facebook. We queried the following URL: <code><pre>@url</pre></code>. Facebook\'s servers returned an error @error: <code><pre>@return</pre></code>', array('@url' => $token_url, '@error' => $authentication_result->code, '@return' => check_plain(print_r($authentication_result->data, TRUE))));
  }
  else {
    // The result from Facebook comes back in a query-string-like format,
    // key1=value1&key2=value2. Parse into an array.
    $authentication_strings = explode('&', $authentication_result->data);
    $authentication_values = array();
    foreach ($authentication_strings as $authentication_string) {
      list($authentication_key, $authentication_value) = explode('=', $authentication_string);
      $authentication_values[$authentication_key] = $authentication_value;
    }
  }
  
  return isset($authentication_values['access_token']) ? $authentication_values['access_token'] : NULL;
}


function mws_fb_userCanPublish($fb_id, $access_token) {
  module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');
  $result = fboauth_graph_query("$fb_id/permissions", $access_token);
  return (isset($result->data[0]->publish_stream) && isset($result->data[0]->user_photos) && isset($result->data[0]->user_about_me) && isset($result->data[0]->user_website));
}


function mws_fb_photoImport($fb_id, $access_token) {
  
  module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');
  // Query against the Facebook Graph API. See the Facebook API for a list of
  // commands: http://developers.facebook.com/docs/reference/api/
  $albums = fboauth_graph_query("$fb_id/albums", $access_token);
  dpm($albums);
//  foreach ($albums->data as $album) {
//    $album_photos = fboauth_graph_query("$album->id/photos", $access_token);
//    dpm($album_photos);
//  }


  // Optionally set a completion or error message.
//  drupal_set_message(t('Import complete!'));
}


function mws_fb_postToWall($fb_id, $access_token, $params) {
  module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');
  $params['method'] = 'post';
  $result = fboauth_graph_query("$fb_id/links", $access_token, $params, 'POST');
  return $result;
}


function mws_fb_node_update($node) {
  if ($node->type == 'article') {
    $_SESSION['just_published_' . $node->nid] = TRUE;
    mws_fb_nodePublishToFbLinks($node);
  }
}


function mws_fb_node_insert($node) {
  if ($node->type == 'article') {
    
    $_SESSION['just_published_' . $node->nid] = TRUE;
    mws_fb_nodePublishToFbLinks($node);
  }
}


function mws_fb_nodePublishToFbLinks($node) {
  
  if (isset($_SESSION['fb_id']) && mws_fb_userCanPublish($_SESSION['fb_id'], $_SESSION['fb_longLiveToken'])) {
    //dpm($node);
    /*
    $params = array(
        'caption' => 'It could be a joke :)',
        'name' => $node->title,
        'link' => url('node/' . $node->nid, array('absolute' => TRUE)),
        'message' => $node->body['und'][0]['value'],
        'description' => 'My new post on mws.all4senses.com...',
        'actions' => '{"name": "' . 'My profile at mws.all4senses.com' . '", "link": "' . url('user/' . $node->uid, array('absolute' => TRUE)) . '"}',
    );
    */

    $params = array(
      'link' => url('node/' . $node->nid, array('absolute' => TRUE)),
      'message' => 'My new post on mws.all4senses.com...',
    );

    $result = mws_fb_postToWall($_SESSION['fb_id'], $_SESSION['fb_longLiveToken'], $params);
    dpm($result);
  }
  
}


/**
 * Implements hook_block_info().
 */
function mws_fb_block_info() {
  $blocks['mws_fb_login'] = array(
    'info' => t('Mws Facebook login'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mws_fb_block_view($delta) {

  $block = array();
  switch ($delta) {      
    case 'mws_fb_login':
      $block['subject'] = t('Mws Facebook login');
      $block['content'] = mws_fb_fbLoginLink();
      break;
    
  }
  return $block;
}


function mws_fb_fbLoginLink() {
  
  global $user;
  if ($user->uid == 1) {
    $fb_users = variable_get('fb_users', array());
    dpm($fb_users);
  }
  
  $url = 'http://mws.all4senses.com' . ($_SERVER['REQUEST_URI'] == '/home' ? '/' : $_SERVER['REQUEST_URI']);
  
  if (isset($_SESSION['fb_longLiveToken'])) {
    $output = '<div>You are logged in via FB id: ' . $_SESSION['fb_id'] . '</div>';
    
    if (!mws_fb_userCanPublish($_SESSION['fb_id'], $_SESSION['fb_longLiveToken'])) {
      $link = fboauth_action_link_properties('connect', 'http://mws.all4senses.com' . $_SERVER['REQUEST_URI']);
      $link['query']['scope'] .= ',publish_stream,user_photos,user_about_me,user_website';
      $output .= l(t('Wanna become comedian and Publish to Facebook?'), $link['href'], array('query' => $link['query']));
    }
    else {
      mws_fb_photoImport($_SESSION['fb_id'], $_SESSION['fb_longLiveToken']);
    }
    
    
    
    
    return $output;
  }
  else {
    //print fboauth_action_display('connect', 'http://mws.all4senses.com' . $_SERVER['REQUEST_URI']);  
    $link = fboauth_action_link_properties('connect', 'http://mws.all4senses.com' . $_SERVER['REQUEST_URI']);
    //$link['query']['scope'] .= ',publish_stream';
    $output = l(t('Login via Facebook'), $link['href'], array('query' => $link['query']));
     
    $link['query']['scope'] .= ',publish_stream,user_photos,user_about_me,user_website';
    $output .= '<br>' . l(t('Login via Facebook as a comedian and Publish to Facebook'), $link['href'], array('query' => $link['query']));
    return $output;
  }
  
}


/**
 * Implements hook_user_delete().
 */
function mws_fb_user_delete($account) {

  // Delete fb related data of this module.
}


/**
 * Implements hook_user_cancel().
 */
function mws_fb_user_cancel($edit, $account, $method) {
  mws_fb_user_delete($account);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function mws_fb_form_user_profile_form_alter(&$form, &$form_state) {
  /*
  $uid = $form['#user']->uid;
  $fbid = mws_fb_fbid_load($uid);

  $mws_fb_form = array(
    '#type' => 'item',
    '#title' => t('Facebook connect'),
    '#markup' => theme('mws_fb_user_form_connect', array('uid' => $uid, 'fbid' => $fbid)),
  );

  // Inject the Facebook options after the e-mail settings. No weights are on
  // these elements by default, so we have to put it in order.
  $temp_form = array();
  foreach (element_children($account_form) as $child) {
    $temp_form[$child] = $account_form[$child];
    if ($child == 'mail') {
      if (isset($temp_form[$child]['#weight'])) {
        $mws_fb_form['#weight'] = $temp_form[$child]['#weight'];
      }
      $temp_form['mws_fb'] = $mws_fb_form;
    }
    unset($account_form[$child]);
  }

  $account_form += $temp_form;
  if (isset($form['account'])) {
    $form['account'] = $account_form;
  }
  else {
    $form = $account_form;
  }
  */
}


/**
 * Implements hook_mws_fb_actions().
 */
function mws_fb_mws_fb_actions() {
  /*
  $actions = array();

  $actions['connect'] = array(
    'title' => t('Connect'),
    'file' => 'includes/mws_fb.mws_fb.inc',
    'callback' => 'mws_fb_action_connect',
    'permissions' => array_keys(mws_fb_user_connect_permissions()),
  );
  return $actions;
  */
}


function mws_fb_node_view($node) {
  switch ($node->type) {
    case 'article':
      mws_fb_addSocialShareData_toPage($node);
      
//      if (isset($_SESSION['just_published_' . $node->nid]) && $_SESSION['just_published_' . $node->nid]) {
//        mws_fb_nodePublishToFbLinks($node);
//        $_SESSION['just_published_' . $node->nid] = FALSE;
//      }
      
      break;
  }
}


function mws_fb_addSocialShareData_toPage($node) {
  
  global $gplus_type;
  $image = NULL;
  $og_type = NULL;
  $title = $node->title;
  
  switch ($node->type) {
    case 'article':
      $og_type = 'article';
      $gplus_type = 'Article';
      break;
  }
  
  if (!$image){
    // Show default image
    $image = '/sites/all/themes/framework/css/images/kamok.jpg';
  }

  if (!strpos($image, '//mws.all4senses.com')) {
    $image = 'http://mws.all4senses.com/' . ltrim($image, '/');
  }

  $tags = array(

      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => $node->title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $node->name,
          ),
      ),


  
    'fb:admins' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'fb:app_id',
          'content' => '271416119626001',
      ),
    ),

    // Title for Facebook.
    'og:title' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:title',
          'content' => $title,
      ),
    ),
      
    // Title for G+.
    'name' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'name',
          'content' => $title,
      ),
    ),
      
    'image_src' => array(
      '#tag' => 'link', // The #tag is the html tag - <link />
      '#attributes' => array( 
          'href' => $image,
          'rel' => 'image_src',
          //'type' => 'text/css',
      ),
    ),
  
    // For Facebook.
    'og:image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:image',
          'content' => $image,
      ),
    ),
      
    // For G+.  
    'image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'image',
          'content' => $image,
      ),
    ),
      
      
  );

    
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}