<?php

/**
 * Implements hook_menu().
 */
function mws_fb_menu() {
  /*
  $items['mws_fb/%mws_fb_action'] = array(
    'title' => 'Facebook connect',
    'page callback' => 'mws_fb_action_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'file' => 'includes/mws_fb.mws_fb.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
  */
}


function mws_fb_fboauth_actions_alter(&$actions) {
  // Replace the normal login callback with custom login callback.
  $actions['connect']['permissions'][] = 'publish_stream';
}

/**
 * Implements hook_user_login().
 */
function mws_fb_user_login(&$edit, $account) {
  
  if (isset($_REQUEST['code']) && $shortLiveToken = fboauth_access_token($_REQUEST['code'], 'connect')) {
    if ($longLiveToken = mws_fb_getLongLiveToken($shortLiveToken)) {
      $fb_users = variable_get('fb_users', array());
      $fbuser = fboauth_graph_query('me', $longLiveToken);
      $fbuser->longLiveToken = $longLiveToken;
      $fb_users[$fbuser->id] = $fbuser;
      variable_set('fb_users', $fb_users);
      $_SESSION['fb_id'] = $fbuser->id;
      $_SESSION['fb_longLiveToken'] = $longLiveToken;
    }
  }
  
  

/*  
  dpm($_SERVER);
  dpm($_REQUEST);
  dpm($_SESSION);
*/  
}


function mws_fb_getLongLiveToken($token, $app_id = NULL, $app_secret = NULL) {
  // Use the default App ID and App Secret if not specified.
  $app_id = isset($app_id) ? $app_id : variable_get('fboauth_id', '');
  $app_secret = isset($app_secret) ? $app_secret : variable_get('fboauth_secret', '');

  /*
  https://graph.facebook.com/oauth/access_token?             
    client_id=APP_ID&
    client_secret=APP_SECRET&
    grant_type=fb_exchange_token&
    fb_exchange_token=EXISTING_ACCESS_TOKEN 
  */  
    
  // Note that the "code" provided by Facebook is a hash based on the client_id,
  // client_secret, and redirect_url. All of these things must be IDENTICAL to
  // the same values that were passed to Facebook in the approval request. See
  // the fboauth_link_properties function.
  /*
  $query = array(
    'client_id' => $app_id,
    'client_secret' => $app_secret,
    'redirect_uri' => fboauth_action_url('fboauth/' . $action_name, array('absolute' => TRUE, 'query' => !empty($_GET['destination']) ? array('destination' => $_GET['destination']) : array())),
    'code' => $code,
  );
  */
  $query = array(
    'client_id' => $app_id,
    'client_secret' => $app_secret,
    'grant_type' => 'fb_exchange_token',
    'fb_exchange_token' => $token,
  );
  
  
  $token_url = url('https://graph.facebook.com/oauth/access_token', array('absolute' => TRUE, 'query' => $query));
  $authentication_result = drupal_http_request($token_url);

  if ($authentication_result->code != 200) {
    watchdog('fboauth', 'My LongLiveTokenRequest: Facebook OAuth could not acquire an access token from Facebook. We queried the following URL: <code><pre>@url</pre></code>. Facebook\'s servers returned an error @error: <code><pre>@return</pre></code>', array('@url' => $token_url, '@error' => $authentication_result->code, '@return' => check_plain(print_r($authentication_result->data, TRUE))));
  }
  else {
    // The result from Facebook comes back in a query-string-like format,
    // key1=value1&key2=value2. Parse into an array.
    $authentication_strings = explode('&', $authentication_result->data);
    $authentication_values = array();
    foreach ($authentication_strings as $authentication_string) {
      list($authentication_key, $authentication_value) = explode('=', $authentication_string);
      $authentication_values[$authentication_key] = $authentication_value;
    }
  }
  
  return isset($authentication_values['access_token']) ? $authentication_values['access_token'] : NULL;
}



function mws_fb_photoImport($fb_id, $access_token) {
  
  module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');
  // Query against the Facebook Graph API. See the Facebook API for a list of
  // commands: http://developers.facebook.com/docs/reference/api/
  $albums = fboauth_graph_query("$fb_id/albums", $access_token);
  dpm($albums);
//  foreach ($albums->data as $album) {
//    $album_photos = fboauth_graph_query("$album->id/photos", $access_token);
//    dpm($album_photos);
//  }


  // Optionally set a completion or error message.
//  drupal_set_message(t('Import complete!'));
  
  
  
  
  
  
  
   $fb_url_params = array(
      'caption' => urlencode('caption' . time()),
      'name' => urlencode('title' . time()),
      'link' => urlencode('http://mws.all4senses.com/article-1'),
      'message' => urlencode('description' . time()),
      'description' => urlencode('user_message' . time()),
      'actions' => urlencode('{"name": "' . 'title123' . '", "link": "' . 'http://mws.all4senses.com/home' . '"}'),
      //'method' => 'post',
    );

//  if($userAction['media_items'])
//      $fb_url_params['picture'] = 'src';

    $result = fboauth_graph_query("$fb_id/feed", $access_token, $fb_url_params);
    dpm($result);
}


/**
 * Implements hook_user_delete().
 */
function mws_fb_user_delete($account) {

  // Delete fb related data of this module.
}

/**
 * Implements hook_user_cancel().
 */
function mws_fb_user_cancel($edit, $account, $method) {
  mws_fb_user_delete($account);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mws_fb_form_user_profile_form_alter(&$form, &$form_state) {
  /*
  $uid = $form['#user']->uid;
  $fbid = mws_fb_fbid_load($uid);

  $mws_fb_form = array(
    '#type' => 'item',
    '#title' => t('Facebook connect'),
    '#markup' => theme('mws_fb_user_form_connect', array('uid' => $uid, 'fbid' => $fbid)),
  );

  // Inject the Facebook options after the e-mail settings. No weights are on
  // these elements by default, so we have to put it in order.
  $temp_form = array();
  foreach (element_children($account_form) as $child) {
    $temp_form[$child] = $account_form[$child];
    if ($child == 'mail') {
      if (isset($temp_form[$child]['#weight'])) {
        $mws_fb_form['#weight'] = $temp_form[$child]['#weight'];
      }
      $temp_form['mws_fb'] = $mws_fb_form;
    }
    unset($account_form[$child]);
  }

  $account_form += $temp_form;
  if (isset($form['account'])) {
    $form['account'] = $account_form;
  }
  else {
    $form = $account_form;
  }
  */
}

/**
 * Implements hook_mws_fb_actions().
 */
function mws_fb_mws_fb_actions() {
  /*
  $actions = array();

  $actions['connect'] = array(
    'title' => t('Connect'),
    'file' => 'includes/mws_fb.mws_fb.inc',
    'callback' => 'mws_fb_action_connect',
    'permissions' => array_keys(mws_fb_user_connect_permissions()),
  );
  return $actions;
  */
}
