<?php

/**
 * @file
 * An example content analyzer using the Content Analysis API
 */

/**
 * Implements hook_menu().().
 */
function kwanalysis_menu() {
  $items = array();

  /*
  $items['admin/config/kwanalysis'] = array(
    'title' => 'Search engine terms',
    'description' => 'Get keywords from search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kwanalysis_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('admin content analysis'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'kwanalysis.admin.inc',
  );
  */

  return $items;
}

/**
 *  Implentation of hook_contentanalysis_analyzers()
 *  register kwanalysis with contentanalysis analyzers registry
 */
function kwanalysis_contentanalysis_analyzers() {
  $analyzers['kwanalysis'] = array(
    'title' => t('Keywords'),
    'module' => 'kwanalysis',
    'callback' => 'kwanalysis_analyzer',
    //'form elements callback' => 'kwanalysis_analyzer_form_elements',
    //'node form submit callback' => 'kwanalysis_node_form_submit',
    'weight' => -5,
  );
  return $analyzers;
}

/**
 * Implements hook_analyzer() via custom define callback().
 *
 * Performs the analysis.
 * callback is defined in hook_contentanalysis_analyzers ['callback']
 *
 * @param unknown_type $context
 *   Array context format defined by contentanalysis.module
 * @param unknown_type $analysis
 *  Array analysis format defined by contentanalysis.module
 * @param unknown_type $params
 *   Array customer defined paramters
 */
function kwanalysis_analyzer($context, $analysis, $params) {

  $terms = kwanalysis_extract_autokeyword($context, $analysis);
/*  
  $items = array();
  if (is_array($terms)) {
    foreach ($terms as $t) {
    	$items[] = "<span class=\"kwresearch_keyword\">{$t['term']}</span>";
    }
  }
  $vars = array(
    'items' => $items,
    'type' => 'ol',
  );
  $out = theme('item_list', $vars); 
*/ 

  $rows = array();
  $header = array(
    array('data' => t('Term')),
    array('data' => t('Relevance')),
  );
  if (is_array($terms)) {
    foreach ($terms as $v) {
      $rows[] = array(
        "<span class=\"kwresearch_keyword\">" . $v['term'] . "</span>",
        number_format($v['relevance'], 0),
      );
    }
  }
  if (!$rows) {
    $rows[] = array(array(
      'data' => t('No keywords available.'),
      'colspan' => count($header),
    ));
  }

  $out = theme('table', array('header' => $header, 'rows' => $rows));

  $analysis['content'][] = contentanalysis_format_content($out, -1);

  return $analysis;

}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function kwanalysis_extract_autokeyword($context, &$analysis = NULL) {
  $files['module_path'] = './' . drupal_get_path('module', 'kwanalysis') . '/lib/class.autokeyword.php';
  if (module_exists('libraries') && ($p = libraries_get_path('autokeyword'))) {
    $files['libraries_path'] = './' . $p . '/class.autokeyword.php';
  }
  foreach ($files as $f) {
    if (file_exists($f)) {
      $file = $f;
      break;
    }
  }
  if (!$file) {
    $msg = t('The Keyword Analysis module requires class.autokeyword.php. ');
    $msg .= l(t('Download the class here.'), 'http://www.phpclasses.org/package/3245-PHP-Automatically-suggest-keywords-from-content-text.html', array('attributes' => array('target' => '_phptextstats')));
    $msg .= "<br><br>";
    if ($files['libraries_path']) {
      $msg .= t(' Download the files and place them in a folder named "autokeyword" under the libraries directory; %path.', 
        array(
        '%path' => $files['libraries_path'],
      )
      );
    }
    else {
      $msg .= t(' Download the files and place them in a folder named "lib" under the keyword analysis module directory; %path.', 
        array(
        '%path' => $files['module_path'],
      )
      );
    }
    if ($analysis) {
      $analysis['messages'][] = contentanalysis_format_message($msg, 'error');
    }
    else {
      drupal_set_message($msg, 'error');
    }
    return FALSE;
  }
  include DRUPAL_ROOT . '/' . ($file);

  $params['content'] = $context['body'];
  $params['min_word_length'] = 4; //minimum length of single words

  $params['min_word_occur'] = 2; //minimum occur of single words


  $params['min_2words_length'] = 3; //minimum length of words for 2 word phrases

  $params['min_2words_phrase_length'] = 10; //minimum length of 2 word phrases

  $params['min_2words_phrase_occur'] = 2; //minimum occur of 2 words phrase


  $params['min_3words_length'] = 3; //minimum length of words for 3 word phrases

  $params['min_3words_phrase_length'] = 10; //minimum length of 3 word phrases

  $params['min_3words_phrase_occur'] = 2; //minimum occur of 3 words phrase 

  $keyword = new autokeyword($params, "iso-8859-1");
//dsm($keyword);
  $term_vals = array();

  $terms1 = explode(', ', $keyword->parse_words());
  $terms2 = explode(', ', $keyword->parse_2words());
  $terms3 = explode(', ', $keyword->parse_3words());
  foreach ($terms1 as $term) {
    if (trim($term)) {
      $c = preg_match_all( "/\b" . $term . "\b/i", $params['content'], $matches);
      $term_vals[$term] = $c;
    }
  }
  foreach ($terms2 as $term) {
    if (trim($term)) {
      $c = preg_match_all( "/\b" . $term . "\b/i", $params['content'], $matches);
      $term_vals[$term] = $c * 2.5;
    }
  }
  foreach ($terms3 as $term) {
    if (trim($term)) {
      $c = preg_match_all( "/\b" . $term . "\b/i", $params['content'], $matches);
      $term_vals[$term] = $c * 7.5;
    }
  }
  arsort($term_vals);
  $terms = array();
  $i = 1;
  foreach ($term_vals as $k => $v) {
    $terms[] = array(
      'term' => $k,
      'relevance' => $v,
    );   
    if ($i++ >= 20) {
      break;
    }
  }

  return $terms;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function kwanalysis_extract_yahoo($context, &$analysis = NULL) {
  //echo "seterms_extract_tags_api($context)";


  $content = urlencode($context['page_title'] . "\n" . $context['body']);

  $url = 'http://search.yahooapis.com/ContentAnalysisService/V1/termExtraction';
  $appid = variable_get('seterms_yahoo_appid', '');
  if (!$appid) {
    drupal_set_message('Cannot extract terms. No Yahoo! Application ID set. ' . l(t('Click here to set your App ID'), 'admin/config/seterms'), 'warning');
    return;
  }

  $output = 'php';

  if (!$content) {
    drupal_set_message('No content to extract from.', 'error');
    return;
  }

  $url = $url . '?appid=' . $appid . '&output=' . $output . '&context=' . $content;

  $ch = curl_init();

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

  curl_setopt( $ch, CURLOPT_POSTFIELDS, 'appid=' . $appid . '&output=' . $output . '&context=' . $context );
  //echo 'appid=' . $appid . '&output=' . $output . '&context=' . $context;

  $res = curl_exec($ch);
  curl_close($ch);

  $res = unserialize($res);
  dsm($res);
  $terms = array();

  if (is_array($res['ResultSet']['Result'])) {
    foreach ($res['ResultSet']['Result'] as $key => $term) {
      $terms[] = $term;
      //$ret['options_html'] .= "<option value=\"$term\">$term</option>\n";

    }
  }
  else {
    return FALSE;
  }

  return $terms;
}

