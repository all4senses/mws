<?php
/**
 * @file product_example.module
 * Demonstrates pricing hooks, etc.
 */

/**
 * Implements hook_menu().
 *
 * Simply presents a page that will explain what this module is for.
 * hook_menu() has nothing to do with the checkout page functionality.
 */
function product_example_menu() {
  $items['commerce_examples/product_example'] = array(
    'title' => 'Product Example',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_example_info_page'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * This form provides a way to interact with some of the example functions
 * provided here.
 */
function product_example_info_page($form, &$form_state) {
  $form['explanation'] = array(
    '#type' => 'item',
    '#markup' => t('This example demonstrates product creation and manipulation.'),
  );

    $form['product_creation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Please create a product for use with this example'),
    );
    $types = commerce_product_types();
    $form['product_creation']['product_type'] = array(
      '#type' => 'select',
      '#title' => t('Product type for product to be created'),
      '#options' => drupal_map_assoc(array_keys($types)),
    );
    $form['product_creation']['title'] = array(
      '#title' => t('Product title'),
      '#type' => 'textfield',
      '#default_value' => t('A dummy product for use with product_example'),
    );
    $form['product_creation']['price'] = array(
      '#title' => t('Product price'),
      '#type' => 'textfield',
      '#description' => t('A price in decimal format, without a currency symbol'),
      '#default_value' => '100.00',
    );
    $form['product_creation']['product_creation_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Create product'),
      '#submit' => array('product_example_product_creation_submit')
    );

  return $form;
}

/**
 * Submit handler for creating a product.
 */
function product_example_product_creation_submit($form, &$form_state) {
  $extras = array(
    'sku' => 'product_example_' . drupal_hash_base64(microtime()),
    'status' => TRUE,
    'uid' => $GLOBALS['user']->uid,
    'title' => $form_state['values']['title'],
  );
  // Use the product example's creation function to create a product.
  $product_id = product_example_create_product($form_state['values']['product_type'], $form_state['values']['price'], $extras);
  drupal_set_message(t('Created sample product with title !title and sku !sku', array('!title' => l($extras['title'], 'admin/commerce/products/' . $product_id), '!sku' => $extras['sku'])));
}

/**
 * Create a product programmatically.
 *
 * This is stolen shamelessly from commerce_bpc. Thanks for the help here!
 *
 * @param $product_type
 *   (string) The name of the product type for which products should be created.
 * @param $price
 *   Decimal amount of price. If additional fields need to be populated they
 *   can be populated in exactly the same way as the commerce_price field.
 * @param $extras
 *   An array for the values of  'extra fields' defined for the product type
 *   entity, or patterns for these. Recognized keys are:
 *   - status
 *   - uid
 *   - sku
 *   - title
 *   Note that the values do NOT come in the form of complex arrays (as they
 *   are not translatable, and can only have single values).
 * @return
 *   The ID of the created product.
 */
function product_example_create_product($product_type, $price, $extras) {
  $form_state = array();
  $form_state['values'] = array();
  $form = array();
  $form['#parents'] = array();

  // Generate a new product object
  $new_product = commerce_product_new($product_type);

  $new_product->status = $extras['status'];
  $new_product->uid = $extras['uid'];

  $new_product->sku = $extras['sku'];
  $new_product->title = $extras['title'];
  $new_product->created = $new_product->changed = time();

  //commerce_price[und][0][amount]
  $price = array(LANGUAGE_NONE => array(0 => array(
    'amount' => $price * 100,
    'currency_code' => commerce_default_currency(),
  )));
  $form_state['values']['commerce_price'] = $price;

  // Notify field widgets to save their field data
  field_attach_submit('commerce_product', $new_product, $form, $form_state);

  commerce_product_save($new_product);
  return $new_product->product_id;
}
